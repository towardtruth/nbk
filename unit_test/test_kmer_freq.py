import unittest
import Kmer as km
from models import GeneSequence, Configuration
import settings
from utils.DBManager import Pgsql


class TestKmerFreq(unittest.TestCase):
    seq0 = 'CGCCGGAGGAGAGCTCGCCTTCTTCGCGCACC'
    seq1 = 'CGCCGGAGGAGAGCTCGCCTTCTTCGCGCACCCTCGCAACCGCTGTCACCGGCGGCGGAGGAGGAGGAGGAGGAGGAGGAGGAGGACGACGATGCGGGACCGCGCTAGGGTTCTGCGAGGCGGCGGGCGCGGGTTTCGAGCCCGTCATGGGAGGGAGGAAGCGAGGCGACGGTTTTGGCGACGCGGCCGCGTCGTTTTCGCCGCGTGCCGTCGCGCCCTCGTCCTCCGAGAACGGAAAGGGTAGGGGAAAGCAGCTACGATTTTTTTTTTGTCGTAGGCGCCGAGATCCTGACCGGTGGGGCCCGCAAGTATGGAGAGAGCCAGAGAGGGCGGCGGCGTGGCCCCGTGGGCGCGAGAGGGATTCCAATTCCCACGTTTTTTGTCTGCGGGGCCGTCGGATTTTCGGGGCTCACGCTATAGGTTGCCAAACGGGCCGGGCTATATGGGCCAGCACGAAACACGACTATTTTAATATGACACGAACACAGCACGTGTAACGCCCCGAATTTTTGCAGTTGAATTTTTTTTCTTTTCTTTACTCGCCAAAATTCGGGCGTTACCTTTTCTTTTTCTTTTTCCCTCGCTAAACCTTGACCTTTTCCAAAGTTCTAGCGGGATTCGGTTTGGAATTCCCGTATGTATAAAAACCCTAAATACTTTATGTTGTTTGATGCACCATGCCGAACCTTGCATTTCTTTTGATTGCTTTGAAAGTGCAAATGCATTCATGTAGAAAGATCGGATTTCGAAAATGTTTTCTTTCTCTTTTCTTTCTCTTTTCTCTCTCTCTTTCTCTCTCCTTTTTTTTTCTCTCTCTCCCGCGCCGTGGGCCGACCCCGGCCGGCCCAGCCGCCCCCTGGCGCCCCCCTCTTGGGCCTAGTAGGCCCAGCCGCCCCTCCCCCTCTTTCCCTTATCCCCTAACCCTCTCCCTCTCCCCCCTCATTTTCTCCCTCCCCACCCAAGCCGCCGCCCCCTACCCGCCCCCTGCCCTAGCCGCCGCCCCTGCCTAGGCCGCCGCCCCTCCCCGTCGCC'
    seq2 = '''ATGAAGTCCATGGGCAGCCGCGACAAGCTCGCGGCGGCGTCGAGCCCCCGCCGCGTCCTCTTGGTGGTCTTCGCCTTCTGCTTCGCATTCGCCACCTTCCTCACCTTCCTCTACACCACCTCC
CACTTCACGACCGCGCCCGGCTCCGGCTCCGGCTCCATCGCGGCCTCTACCACCACCACCACCACCACGACCTCCGGCTCTGCGGGCGGCGGCGGCGGCCAAGGCCAAGCAGGGCCCGAGTCCG
TGTCCAAGCGGCTGCCGGTCCCGGTGTTCGAGGCGCTGGTCCACTTCGCGTCCATCTCGAACGCGACGCACCGCATGTCGGACACGGACATCCGGGCCATGTCGTCCGTGCTCCGCGCGCGGGC
GCCCTGCAACCTGCTGGTGTTCGGGCTGGGCGCGGAATCCCCGCTGTGGCTGGCGCTGAACCACGGCGGGCGGACCGTGTTCCTGGAGGAGAACGAGTTCTACGTCAAGTACCTGGAGCCGCGG
CACCCCGGGATGGAGGCGTACGACGTGTCCTACACGACGAAGGTGCGCGACTTCCGGGACCTGCTGGCGGCGGCGCGGGCGGCGAGGGCCAAGGAGTGCCGGCCCGTGCAGAACCTGCTCTTCT
CCGAGTGCCGCCTCGCCATCAACGACCTGCCCAACGACCTCTACGACGTGGCCTGGGACGTGGTCCTCATCGACGGGCCGTCCGGCTGGAACCCCAACTCGCCCGGCCGGATGCCGTCCATCTT
CACCACCGCCGTGCTGGCGCGCTCCGGCGCCACCGCGGCTAAGGGCCCCACCGACGTGCTCGTGCACGACTTCCAGTTCGAGGTGGAGCAGGTGCTGAGCAGGGAGTTCCTGTGCGACGAGAAC
CGCGTCGCGGGAAGCGGCACCCCGTCGCTCGGCCACTTCGTCATCCGCGGGGGTGGGGCCGGGGCCGGCGACGCCTTCTGCTCTGCCCAGGAGGACGGCTCGTCGGGGGAGAAGACGCGCCGCC
GCCGCAGCCGCAAGTAAATTTTACTTGTCCGCTGTCCGTCTATCTTGCCACGGAGACGGGCAGACGGCATTAGCCGCCAGCGACCTCTCACTTCTTCCTGGCGAGTGGATCTTTACCGCTCCTC
CTCACCCACCTGTTAATTAATTTTTTCTCTCTTGCATATACATATATGTTGGTTGTTTTGTTTCTCGGGACAAGAACTGTAAGAACAACCCTGGTAATATGATTGCCTCCATCACAAAAGAAAA
AAAAATTGAAAAAGAGAAAGAAAAGGAGAAGAGAAGTGATGTAGCAACAACCCTGAAAGCATATATACTAGCTAGTAGCTTTACACATCACGGTTCACATTACAGATAGAGAAAAGGATGTGAT
CATGCAATGGCAAATCTGACGGTTTGTAACGAACGATCGCTTGCTACTTGCTGCTGTTGGTGGTGGCGATCGCCGAGCGGGATCCAGGTCCAGGATGAACGAACGAACGAGGAACAACGGAGTG
TGTGGTGGTGGTGGTTGGATCTTGTCTCAGAACAGTGGCGTCTCTTTTTTTCTTTTATTTTTTCCCATCCGGTTGCTGGCGGGCGATGCCAAGCGGTAAGCGAGCGGCCTCGATTCGTCTCACT
CGCCCGACCCGATCTGAGGCGCTGCTGCTGATGTGCATGAGTCACCAGATCTGCGTCGCCCGCTCGCTTGCTTGTCCGCGCGGGCCGGCGGCGGTTTCGTTAAAAGTTGCCCGTCTTTTGCAGC
AACCTCCGATCGGACCGCCCAACAACTCGTGCTCATCTCTGCCTGCCTGCCTGAAACGGGGAACCTGTGTCGCCGAAGCGGCCACGAGCAGGCAGTGACCCTGACCCCCACCTCGTTCTGCTCT
ACTCTACTCTACTCCCTGCTCTCTTGCCTACCCTCGCACTGCACACACACTGACGAAAACAAGCATAGTGCGAACAGGCAGCAGAACGTGGAAATGGGATGGGGACAGCGTGCCCGCCGCGGAG
CCCGGACGGGACGACCAAGCGTTAA'''

    def _remove_rn(self):
        self.seq2 = self.seq2.replace('\r', '')
        self.seq2 = self.seq2.replace('\n', '')

    def test_compute_kmer(self):
        self._remove_rn()

        print('seq1:', len(self.seq1))
        freq = km.Kmer.kmer_freq_acc(seq=self.seq1, window_size=7, freq=None)
        print(len(self.seq1), len(freq))
        freq = km.Kmer.kmer_freq_acc(seq=self.seq1[:1000], window_size=7, freq=None)
        print(len(self.seq1[:1000]), len(freq))

        print('seq2:', len(self.seq2))
        freq = km.Kmer.kmer_freq_acc(seq=self.seq2, window_size=7, freq=None)
        print(len(self.seq2), len(freq))
        freq = km.Kmer.kmer_freq_acc(seq=self.seq2[:1000], window_size=7, freq=None)
        print(len(self.seq2[:1000]), len(freq))
        freq = km.Kmer.kmer_freq_acc(seq=self.seq2, window_size=3, freq=None)
        print(len(self.seq2), len(freq))
        freq = km.Kmer.kmer_freq_acc(seq=self.seq2[:1000], window_size=3, freq=None)
        print(len(self.seq2[:1000]), len(freq))

    def test_kmer_freq(self):
        self._remove_rn()
        k = 3
        kmer_freq = km.Kmer(seq=self.seq0, window_size=k)
        print('print with default setting')
        kmer_freq.print()

        print('sorted by key - ASC')
        kmer_freq.print(sort_type=1)
        print('sorted by key - DESC')
        kmer_freq.print(sort_type=2)
        print('sorted by value - ASC')
        kmer_freq.print(sort_type=3)
        print('sorted by value - DESC')
        kmer_freq.print(sort_type=4)

        print('sorted by key - ASC with limit')
        kmer_freq.print(sort_type=1, limit=5)
        print('sorted by key - DESC with limit')
        kmer_freq.print(sort_type=2, limit=5)
        print('sorted by value - ASC with limit')
        kmer_freq.print(sort_type=3, limit=5)
        print('sorted by value - DESC with limit')
        kmer_freq.print(sort_type=4, limit=5)

    def _print_kmer_freq(self, kmer_freq=None, limit=0):
        if kmer_freq is None:
            raise ValueError('kmer_freq is empty.')

        print('sorted by key - ASC with limit')
        kmer_freq.print(sort_type=1, limit=limit)
        print('sorted by key - DESC with limit')
        kmer_freq.print(sort_type=2, limit=limit)
        print('sorted by value - ASC with limit')
        kmer_freq.print(sort_type=3, limit=limit)
        print('sorted by value - DESC with limit')
        kmer_freq.print(sort_type=4, limit=limit)

    def test_kmer_freq_long_seq(self):
        self._remove_rn()

        for k in range(1, 18):
            print('{}-mer:'.format(k))
            kmer_freq = km.Kmer(seq=self.seq2, window_size=k)
            self._print_kmer_freq(kmer_freq=kmer_freq, limit=5)
            print('')

    def test_set_kmer_freq_promoter(self):
        k = 7
        exp_setting = Configuration()
        exp_setting.set_kmer_size(kmer_size=k)
        conn = Pgsql.Common.connect(settings.conn_string_test)
        #gnid = 58737
        gnid = 76
        seq_type = 'm1'
        gs_pep = GeneSequence(gnid=gnid, seq_type=seq_type, is_max_seq_len=True, conn=conn, k=k)
        print(gs_pep.get_seq_str())
        kf = gs_pep.get_kmer_freq(k=k)
        kf.print(sort_type=4, limit=10)

    def test_compute_kmers_nn(self):
        seq = '''ACTNNNNGACT'''
        seq2 = '''ACTNNNNNGATC'''
        seq3 = '''ACTNNNNNGATCNNNNNNATTGGCANNNNNNAACTTGGGTTNNNN'''
        seq4 = '''NN123456789NNNNNN123456789NNNNNN123456789NNNN'''
        k=3
        kmer_freq = km.Kmer(seq=seq, window_size=k)
        print(seq)
        kmer_freq.print()
        kmer_freq = km.Kmer(seq=seq2, window_size=k)
        print(seq2)
        kmer_freq.print()
        kmer_freq = km.Kmer(seq=seq3, window_size=k)
        print(seq3)
        kmer_freq.print()
        kmer_freq = km.Kmer(seq=seq4, window_size=k)
        print(seq4)
        kmer_freq.print()

    def test_kmer_freq_dynm(self):
        seq1 = 'MEMVLRSQSPLCLRSGPVLIFRPTVAGGGGGTQSLLRTTRFARRRVIRCVVASPGCPNRKSRTASPNVKVAAYSNYAPRLLVESSSKKSEHHDSSRHREETIDTYNGLSGSDAAELTSNRDVEIEVDLQHISEEELPGKVSINASLGEMETVDEAEVEEDKFEVDTSGIVLRNVAVREVDPKDEHNAKDVFVVDSSGTAPDNAAVEEVVDEAEVEEDMVDVDILGLDLNNATIEEIDLMEEALLENFDVDSPGNASSGRTYGGVDELGELPSTSVDCIAINGKRRSLKPKPLPIVRFQEQEQIVLSIVDEEGLIASSCEEGQPVVDYDKQEENSTAFDEQKQLTDDFPEEGISIVHFPEPNNDIVGSSKFLEQKQELDGSYKQDRSTTGLHEQDQSVVSSHGQDKSIVGVPQQIQYNDQSIAGSHRQDQSIAGAPEQIQSVAGYIKPNQSIVGSCKQHELIIPEPKKIESIISYNEIDQSIVGSHKQDKSVVSVPEQIQSIVSHSKPNQSTVDSYRQAESIIGVPEKVQSITSYDKLDQSIVGSLKQDEPIISVPEKIQSIVHYTKPNQSIVGLPKQQQSIVHIVEPKQSIDGFPKQDLSIVGISNEFQTKQLATVGTHDGLLMKGVEAKETSQKTEGDTLQATFNVDNLSQKQEGLTKEADEITIIEKINDEDLVMIEEQKSIAMNEEQTIVTEEDIPMAKVEIGIDKAKFLHLLSEEESSWDENEVGIIEADEQYEVDETSMSTEQDIQESPNDDLDPQALWSMLQELAEKNYSLGNKLFTYPDVLKADSTIDLYFNRDLSAVANEPDVLIKGAFNGWKWRFFTEKLHKSELAGDWWCCKLYIPKQAYRMDFVFFNGHTVYENNNNNDFVIQIESTMDENLFEDFLAEEKQRELENLANEEAERRRQTDEQRRMEEERAADKADRVQAKVEVETKKNKLCNVLGLARAPVDNLWYIEPITTGQEATVRLYYNINSRPLVHSTEIWMHGGYNNWIDGLSFAERLVHHHDKDCDWWFVDVVVPERTYVLDWVFADGPPGSARNYDNNGGHDFHATLPNNMTEEEYWMEEEQRIYTRLQQERREREEAIKRKAERNAKMKAEMKEKTMRMFLVSQKHIVYTEPLEIHAGTTIDVLYNPSNTVLTGKPEVWFRCSFNRWMYPGGVLPPQKMVQAENGSHLKVTVYVPRDAYMMDFVFSESEEGGIYDNRNGLDYHIPVFGSIAKEPPMHIVHIAVEMAPIAKVGGLGDVVTSLSRAVQDLGHNVEVILPKYGCLNLSNVKNLHIHQSFSWGGSEIKVWRGLVEGLCVYFLEPQNGMFGVGYVYGRDDDRRFGFFCRSALEFLLQSGSSPNIIHCHDWSSAPVAWLHKENYAKSSLANARVVFTIHNLEFGAHHIGKAMRYCDKATTVSNTYSKEVSGHGAIVPHLGKFYGILNGIDPDIWDPYNDNFIPVHYTCENVVEGKRAAKRALQQKFGLQQIDVPVVGIVTRLTAQKGIHLIKHAIHRTLERNGQVVLLGSAPDSRIQADFVNLANKLHGVNHGQVRLSLTYDEPLSHLIYAGSDFILVPSIFEPCGLTQLVAMRYGTIPIVRKTGGLFDTVFDVDNDKERARDRGLEPNGFSFDGADSNGVDYALNRQAQAISAWFDARSWFHSLCKRVMEQDWSWNRPALDYIELYRSASKL'
        k=3
        kf = km.Kmer(seq=seq1, window_size=k)
        print(len(kf.kmer_freq))
        kf.print()
        k=2
        kf = km.Kmer(seq=seq1, window_size=k)
        print(len(kf.kmer_freq))


if __name__ == '__main__':
    unittest.main()
